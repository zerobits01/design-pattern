All right so now we're going to take a look at the first of these structured patterns the Adopt a pattern
and to begin with.
Let me give you a scenario where you have to adopt something so let's suppose that you are given a kind
of prepackaged API and that API consists of a point class as well as a draw point function.
So we're going to have a class called points and this is going to have initialize it which just sets
x and y values x and y like so.
So I'm going to just store them here and let's also define some sort of API for actually drawing a point.
Draw points P where we're not even going to use b because we're not doing a real visual application
so I'm just going to emulators I'm going to print a dot but I'm going to print it without doing a line
break so that you actually get to see several of those at the same time.
So the scenario is that you are given this so you're given this API and let's suppose that you have
to absolutely work with this API.
There's nothing that you can do but you actually have something different.
So the API that you have looks like this.
So let's suppose in your application everything is made of lines so you have a line and that line is
initialized with start and end positions which once again fairly obvious implementation here.
Now let's suppose that these lines are used to make up larger objects like rectangles for example.
So you have a class called rectangle which is a list of lines.
So we may as well inherit and here when you actually initialize the rectangle you specify the x and
y coordinates as well as the width and the height.
And so what you do apart from you know calling the base class a initialize there is you actually append
the different lines because the rectangle is made of four lines so you make every single one of them
and you kind of you add them to the collection.
So it might look something like this.
OK.
So that's the code that we have.
And now what we can do is we can try to figure out how to work with all of this because let's imagine
the following scenario.
Let's imagine that you have a bunch of rectangles.
So I'm going gonna I'm just gonna make a list here.
So you will have a rectangle going from one one with a size of ten by ten.
And let's have another one starting at X equals three white wireless three.
And the size is going to be six by six.
So we have these two rectangles.
And the problem is we want to draw them.
So we want to have some sort of drawing function.
Let's have a draw rectangles.
And here we want to actually draw some stuff.
So first of all I'll add the print.
So a couple of line breaks drawing some stuff a few more line breaks and then we want to go for each
rectangle in rectangles.
And while we might want to go through every single line in that rectangle for line in our C but now
we need to draw it.
Now the problem is that our API for drawing looks like this everything is made of points and we don't
have any points at the moment.
Well we do have points in the sense that a line is defined by the start and end points but we want every
single point that is used to actually draw a line.
So not just the start in the end but we want all the in-between points as well.
So the question is how do we actually jump from the API that we are given.
How do we use it with the objects that we actually want to use it with.
And the answer is you build an adapter so whenever your API doesn't match what you are actually working
with you need to build an in-between component and that in-between component is called an adapter.
That's what you build to actually get the whole thing to accept.
In our case what we need to do is we need to represent a line as a series of points in order to be able
to draw anything because otherwise just nothing will work basically.
So we need to build an adapter.
We need to build some sort of line two point adapter.
So that's what we're going to be doing here.
So class line two points adapter which is also going to be a list.
But this time round is actually going to be a list of points.
So what I'm going to do here is I'm going to actually keep first of all the number of points that are
generated overall count equals zero because of what we're going to be doing we're going to be generating
lots of points so if you have a line going from 0 0 to 10 0 for example you might be generating like
11 points if we're going discretely not on a continuous line.
OK so we need some sort of initialize there and death in it like so we might want to call the parent
to begin with.
Then I want to increment the count.
This is going to be useful later because we might be looking at the count to see how many how these
we are actually how many calls we're actually making.
And now I'm going to do print.
So we're going to print out that we're generating points for the line and I may as well just copy over
all the code that is actually required to do this thing.
So what is the problem here.
Well first of all we need to specify that we are initializing the line two point adapter on a particular
line.
What we do then is we print out the count.
So we're counting the number of times that the initialized has been called them was saying that we're
generating a number of points for a given line and then we specify the start and end of that line.
Then we calculate the left to right top and bottom coordinates off that point of that line and then
we append the appropriate point.
So essentially for any given line the line to point adapter generates a number of points and it stores
them because it happens to be a list.
And now that is a list.
What we can do is we can jump back down here and we can complete this implementation of our adapter.
So here we say adapter equals line two points adapter like so and then we provide the line that we want
to actually adapt.
And then for every point p in the adapter because remember adapter is also a list.
This is where we use the API that we are given.
We call draw points with the argument P there by drawing the actual point.
So coming down here of what we can now do is we can draw the rectangles that we made.
So rectangles are c s like so we can actually run this and see what we get.
Okay.
So as you can see everything is working correctly we're drawing some stuff we're generating points and
then drawing them.
So the DOT is where you actually draw some points.
So we generate more points more points more points and then we draw them all all over the place basically.
So this is just an illustration of how an adapter would go ahead and adapt one API to another API.
Now there is a bit of a problem here.
If I duplicate this call if I do the trolling once and I run this once again what you're going to be
seeing here is that on both of these calls we are generating points so we're generating points up above
and we're generating both those same points by the way when we call this thing again.
So what is the problem with this.
Well the problem is that as you can see the adapter actually generates temporary objects because in
order to adapt a line to a point you have to generate lots of points and the question is Well why do
we have to keep doing it over and over again and in the next lesson we're going to take a look at how
we can actually optimize this problem and do away with this regeneration of points for our lines.
